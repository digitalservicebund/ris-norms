# This workflow checks and manages pinned dependencies in the backend project due to CVEs. The process is as follows:
# 1. Check for pinned dependencies: It checks if there are any dependencies pinned because of CVEs. If no pinned dependencies are found, the pipeline stops.
# 2. Comment out pinned dependencies: It comments out the pinned dependencies in the build.gradle.kts file
# 3. Build Docker image: It builds a Docker image of the application.
# 4. Run Trivy vulnerability scan: It runs a Trivy vulnerability scan on the newly built Docker image.
# 5. Evaluate CVE status: Based on the Trivy results:
#    - If a CVE is not found in the scan, the pinned dependency is removed from both the build.gradle.kts file and the libs.versions.toml file.
#    - If the CVE is still present, the commented-out dependency is restored in the build.gradle.kts file.
# 6. If changes were made:
#    6.1. The Spotless formatter is run to apply code formatting, and the output is displayed.
#    6.2. The Docker image is rebuilt, and a second Trivy scan is run. The pipeline will fail if any CVE is found.
#    6.3. Changes are commited to a branch with GITHUB_TOKEN so that the commit is marked as verified. Then a PR is created with GH_PAT_PUSH_TOKEN, which has been created with the digitalservice-machine user and is valid for 1 year (so to expired on 24th June 2026),
#         and has higher permissions to do so. This flow is needed because of the main branch protection rules, which require status checks before merge (activated because of renovate autoMerge)

name: "Check and Remove Unnecessary CVE-Pinned Backend Dependencies"

on:
  workflow_dispatch: # Manual trigger
  schedule:
    - cron: "0 3 * * 1" # Mondays at 4am (winter) or 5am (summer) Berlin time

jobs:
  check_backend_pinned_dependencies:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          submodules: "true"

      - name: Set up JDK
        uses: actions/setup-java@v5
        with:
          java-version: "21.0"
          distribution: "temurin"
          cache: gradle

      - name: Extract and Comment Out Pinned Dependencies
        working-directory: ./backend
        run: |
          echo "Extracting pinned dependencies..."
          grep -A1 "# CVE-" gradle/libs.versions.toml | grep -v "^--$" > pinned_deps.txt || true

          if [[ -s pinned_deps.txt ]]; then
            echo "PINNED_DEPS_FOUND=true" >> $GITHUB_ENV
            while read -r comment; do
              if [[ "$comment" == "# CVE-"* ]]; then
                # Extract the CVE ID
                last_cve=$(echo "$comment" | sed 's/^# //' | xargs)
              else
                # Extract dependency name
                dep_name=$(echo "$comment" | cut -d'=' -f1 | xargs)
                formatted_dep_name=${dep_name//-/.}  # Replace dashes with dots
                full_dep="libs.$formatted_dep_name"  # Add "libs."
                # Comment out the implementation line in build.gradle.kts
                sed -i "/implementation($full_dep)/s/^/\/\/ /" build.gradle.kts

                echo "Commented out $dep_name ($last_cve)"
              fi
            done < pinned_deps.txt
          else
            echo "No pinned dependencies found."
            echo "PINNED_DEPS_FOUND=false" >> $GITHUB_ENV
          fi

      - name: Build docker image
        if: env.PINNED_DEPS_FOUND == 'true'
        run: docker build -t my-app:test --secret id=SENTRY_DSN,env=SENTRY_DSN --secret id=SENTRY_AUTH_TOKEN,env=SENTRY_AUTH_TOKEN .
        env:
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

      - name: Run Trivy vulnerability scan
        if: env.PINNED_DEPS_FOUND == 'true'
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8
        env:
          ACTIONS_RUNTIME_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TRIVY_DB_REPOSITORY: ghcr.io/aquasecurity/trivy-db,public.ecr.aws/aquasecurity/trivy-db
          TRIVY_JAVA_DB_REPOSITORY: ghcr.io/aquasecurity/trivy-java-db,public.ecr.aws/aquasecurity/trivy-java-db
        with:
          image-ref: my-app:test
          format: "json"
          trivy-config: "./trivy.yaml"
          output: "trivy-results.json"

      - name: Extract CVE IDs
        if: env.PINNED_DEPS_FOUND == 'true'
        run: |
          echo "Checking Trivy results..."
          # Ensure an empty file exists to prevent issues in later steps
          touch found_cves.txt
          jq -r '.Results[].Vulnerabilities?[]?.VulnerabilityID' trivy-results.json > found_cves.txt

          # Display found CVEs (if any)
          if [[ -s found_cves.txt ]]; then
            echo "Found CVEs:"
            cat found_cves.txt
          else
            echo "No CVEs found."
          fi

      - name: Iterate pinned dependencies and update files
        if: env.PINNED_DEPS_FOUND == 'true'
        working-directory: ./backend
        run: |
          echo "Restoring or removing dependencies based on CVE results..."
          echo "CHANGES_MADE=false" >> $GITHUB_ENV
          while read -r comment; do
            if [[ "$comment" == "# CVE-"* ]]; then
              # Extract the CVE ID
              last_cve=$(echo "$comment" | sed 's/^# //' | xargs)
            else
              dep_name=$(echo "$comment" | cut -d'=' -f1 | xargs)
              formatted_dep_name=${dep_name//-/.}  # Replace dashes with dots
              full_dep="libs.$formatted_dep_name"  # Add "libs."

              # If CVE is found in found_cves.txt, uncomment the implementation line
              if grep -q "$last_cve" ../found_cves.txt; then
                echo "$last_cve still present. Restoring $dep_name."
                # Uncomment the implementation line in build.gradle.kts
                sed -i "s#^\s*//\s*implementation($full_dep)#implementation($full_dep)#" build.gradle.kts
              else
                echo "$last_cve is gone. Removing $dep_name."
                # Remove the commented-out dependency lines from build.gradle.kts
                sed -i "/^\s*\/\/\s*implementation($full_dep)/d" build.gradle.kts
                # Remove pair of lines with comment with CVE id and dependency
                sed -i "/# $last_cve/,+1d" gradle/libs.versions.toml
                echo "CHANGES_MADE=true" >> $GITHUB_ENV
              fi
            fi
          done < pinned_deps.txt

      - name: Run spotless
        if: env.PINNED_DEPS_FOUND == 'true' && env.CHANGES_MADE == 'true' # Run only if changes were made
        working-directory: ./backend
        run: ./gradlew spotlessApply # when running locally with act ad "--no-watch-fs" to disable Gradle's file system watcher, not working because containerized env with act

      - name: Build docker image (again)
        if: env.PINNED_DEPS_FOUND == 'true' && env.CHANGES_MADE == 'true'
        run: docker build -t my-app:test --secret id=SENTRY_DSN,env=SENTRY_DSN --secret id=SENTRY_AUTH_TOKEN,env=SENTRY_AUTH_TOKEN .
        env:
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

      - name: Double-check if no CVEs are found
        if: env.PINNED_DEPS_FOUND == 'true' && env.CHANGES_MADE == 'true'
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8
        env:
          ACTIONS_RUNTIME_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TRIVY_DB_REPOSITORY: ghcr.io/aquasecurity/trivy-db,public.ecr.aws/aquasecurity/trivy-db
          TRIVY_JAVA_DB_REPOSITORY: ghcr.io/aquasecurity/trivy-java-db,public.ecr.aws/aquasecurity/trivy-java-db
        with:
          image-ref: my-app:test
          format: table
          trivy-config: "./trivy.yaml"
          exit-code: 1 # if any level of CVE is found, break the pipeline

      - name: Create branch and PR
        id: cpr
        if: env.PINNED_DEPS_FOUND == 'true' && env.CHANGES_MADE == 'true'
        uses: peter-evans/create-pull-request@46cdba753c74545733b821043d64bd6925fc4da9
        with:
          token: ${{ secrets.GH_PAT_PUSH_TOKEN }} # so that the PR can be created, GITHUB_TOKEN is not enough
          branch-token: ${{ secrets.GITHUB_TOKEN }} # so that the commit can be signed
          sign-commits: "true"
          branch: "removed-CVEs"
          title: "chore: pinned dependencies because of CVEs removed"
          add-paths: |
            backend/gradle/libs.versions.toml
            backend/build.gradle.kts
          body: |
            This PR removes pinned dependencies that are no longer needed because their associated CVEs were resolved.
          base: main

      - name: Enable Pull Request Automerge
        if: steps.cpr.outputs.pull-request-operation == 'created'
        uses: peter-evans/enable-pull-request-automerge@a59ea044f2aeabb1e63839cf06068655c1d70998
        with:
          token: ${{ secrets.GH_PAT_PUSH_TOKEN }}
          pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
          merge-method: squash

      - name: Send status to Slack
        uses: digitalservicebund/notify-on-failure-gha@66c485757701f8d5dbee32f24df38d904ca693ba
        if: ${{ failure() }}
        with:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
