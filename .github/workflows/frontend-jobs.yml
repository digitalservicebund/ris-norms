on:
  workflow_call:
jobs:
  check-style-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ./frontend/package.json
          cache: npm
          cache-dependency-path: ./frontend/package-lock.json
      - name: Cache npm cache
        uses: actions/cache@v4
        id: cache-npm-cache
        with:
          # The docs discourage caching `node-modules`, cf. https://github.com/actions/cache/blob/main/examples.md#node---npm
          path: /home/runner/.npm
          key: npm-cache-${{ hashFiles('./frontend/package-lock.json') }}
      - name: Install node modules
        run: npm ci
        working-directory: ./frontend
      - name: Check style
        run: npm run style:check
        working-directory: ./frontend
      - name: Send status to Slack
        uses: digitalservicebund/notify-on-failure-gha@15dd05b628141b7bac0ad26e08c1935cb3ba6bc8 # v1.4.0
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
        with:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ./frontend/package.json
          cache: npm
          cache-dependency-path: ./frontend/package-lock.json
      - name: Cache npm cache
        uses: actions/cache@v4
        id: cache-npm-cache
        with:
          # The docs discourage caching `node-modules`, cf. https://github.com/actions/cache/blob/main/examples.md#node---npm
          path: /home/runner/.npm
          key: npm-cache-${{ hashFiles('./frontend/package-lock.json') }}
      - name: Install node modules
        run: npm ci
        working-directory: ./frontend
      - name: Check style
        run: npm run test
        working-directory: ./frontend
      - name: Send status to Slack
        uses: digitalservicebund/notify-on-failure-gha@15dd05b628141b7bac0ad26e08c1935cb3ba6bc8 # v1.4.0
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
        with:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  analyze-frontend:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ./frontend/package.json
          cache: npm
          cache-dependency-path: ./frontend/package-lock.json
      - name: Cache npm cache
        uses: actions/cache@v4
        id: cache-npm-cache
        with:
          # The docs discourage caching `node-modules`, cf. https://github.com/actions/cache/blob/main/examples.md#node---npm
          path: /home/runner/.npm
          key: npm-cache-${{ hashFiles('./frontend/package-lock.json') }}
      - name: Install node modules
        run: npm ci
        working-directory: ./frontend
      - name: Install SonarScanner
        uses: digitalservicebund/github-actions/setup-sonarscanner@7c3c5fd3b1467215f9e6c66181a37538607999b1
      - name: Establish virtual display buffer
        run: |
          /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          echo "Xvfb started"
      - name: Scan with SonarQube
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          DISPLAY: ":99.0"
        run: |
          npm run coverage
          sonar-scanner
        working-directory: ./frontend
      - name: Check SonarQube Quality Gate
        uses: sonarsource/sonarqube-quality-gate-action@d304d050d930b02a896b0f85935344f023928496
        with:
          scanMetadataReportFile: frontend/.scannerwork/report-task.txt
        timeout-minutes: 3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Send status to Slack
        uses: digitalservicebund/notify-on-failure-gha@15dd05b628141b7bac0ad26e08c1935cb3ba6bc8 # v1.4.0
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
        with:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  audit-licenses-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ./frontend/package.json
          cache: npm
          cache-dependency-path: ./frontend/package-lock.json
      - name: Cache npm cache
        uses: actions/cache@v4
        id: cache-npm-cache
        with:
          # The docs discourage caching `node-modules`, cf. https://github.com/actions/cache/blob/main/examples.md#node---npm
          path: /home/runner/.npm
          key: npm-cache-${{ hashFiles('./frontend/package-lock.json') }}
      - name: Install node modules
        run: npm ci
        working-directory: ./frontend
      - name: Run license scanner
        run: npm run audit:licences
        working-directory: ./frontend
      - name: Upload licence report
        uses: actions/upload-artifact@v4
        with:
          name: frontend-licence-report.csv
          retention-days: 3
          path: frontend/licence-report.csv
      - name: Send status to Slack
        uses: digitalservicebund/notify-on-failure-gha@15dd05b628141b7bac0ad26e08c1935cb3ba6bc8
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
        with:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  setup-env-e2e-tests-frontend:
    runs-on: ubuntu-latest
    outputs:
      container_registry: ${{ steps.set-env.outputs.container_registry }}
      container_image_name: ${{ steps.set-env.outputs.container_image_name }}
      container_image_version: ${{ steps.set-env.outputs.container_image_version }}
    steps:
      - name: Set environment variables as outputs
        id: set-env
        run: |
          echo "container_registry=${{ env.CONTAINER_REGISTRY }}" >> $GITHUB_OUTPUT
          echo "container_image_name=${{ env.CONTAINER_IMAGE_NAME }}" >> $GITHUB_OUTPUT
          echo "container_image_version=${{ env.CONTAINER_IMAGE_VERSION }}" >> $GITHUB_OUTPUT

  e2e-tests-frontend:
    needs: [frontend-create-docker-image, setup-env-e2e-tests-frontend]
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        mode: [e2e]
    uses: ./.github/workflows/playwright-test.yml
    with:
      browser: ${{ matrix.browser }}
      mode: ${{ matrix.mode }}
      container_registry: ${{ needs.setup-env-e2e-tests-frontend.outputs.container_registry }}
      container_image_name: ${{ needs.setup-env-e2e-tests-frontend.outputs.container_image_name }}
      container_image_version: ${{ needs.setup-env-e2e-tests-frontend.outputs.container_image_version }}
    secrets: inherit
