name: Pipeline

permissions:
  contents: write # action-gh-release
  security-events: write # upload-sarif

on:
  # run on all branches
  push:
  # Allow to run this workflow manually
  workflow_dispatch:

jobs:
  ####################
  # time machine jobs
  ####################

  validate-gradle-wrapper:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Validate gradle wrapper
        uses: gradle/wrapper-validation-action@56b90f209b02bf6d1deae490e9ef18b21a389cd4

  build-time-machine:
    runs-on: ubuntu-latest
    needs: [validate-gradle-wrapper]
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: "17.0"
          distribution: "temurin"
      - name: Setup Gradle
        uses: gradle/gradle-build-action@8cbcb9948b5892387aed077daf6f90e1f0ba5b27
        with:
          gradle-version: ${{ env.GRADLE_VERSION}}
          arguments: install
          build-root-directory: ./time-machine
      - name: Upload 'install' # the release will pick this up, later
        uses: actions/upload-artifact@v4
        with:
          name: time-machine-install
          retention-days: 1
          path: time-machine/build/install
      - name: Send status to Slack
        # Third-party action, pin to commit SHA!
        # See https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions
        uses: digitalservicebund/notify-on-failure-gha@15dd05b628141b7bac0ad26e08c1935cb3ba6bc8 # v1.4.0
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
        with:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  unit-tests-time-machine:
    runs-on: ubuntu-latest
    needs: [validate-gradle-wrapper]
    steps:
      - uses: actions/checkout@v4
      - name: Get Gradle version
        run: |
          echo "GRADLE_VERSION=$(sed -n 's/.*gradle-\([0-9]*\(\.[0-9]*\)*\)-.*/\1/p' ./gradle/wrapper/gradle-wrapper.properties)" >> $GITHUB_ENV
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: "17.0"
          distribution: "temurin"
      - uses: gradle/gradle-build-action@8cbcb9948b5892387aed077daf6f90e1f0ba5b27
        with:
          gradle-version: ${{ env.GRADLE_VERSION}}
          arguments: test -x integrationTest
          build-root-directory: ./time-machine
      - name: Send status to Slack
        # Third-party action, pin to commit SHA!
        # See https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions
        uses: digitalservicebund/notify-on-failure-gha@15dd05b628141b7bac0ad26e08c1935cb3ba6bc8 # v1.4.0
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
        with:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  audit-licenses-time-machine:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: "17.0"
          distribution: "temurin"
      - name: Setup Gradle
        uses: gradle/gradle-build-action@8cbcb9948b5892387aed077daf6f90e1f0ba5b27
        with:
          gradle-version: ${{ env.GRADLE_VERSION}}
          arguments: checkLicense
          build-root-directory: ./time-machine
      - name: Send status to Slack
        # Third-party action, pin to commit SHA!
        # See https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions
        uses: digitalservicebund/notify-on-failure-gha@15dd05b628141b7bac0ad26e08c1935cb3ba6bc8 # v1.4.0
        if: ${{ failure() && github.ref == 'refs/heads/main'}}
        with:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  analyze-time-machine:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: "17.0"
          distribution: "temurin"
      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
      - name: Setup Gradle
        uses: gradle/gradle-build-action@8cbcb9948b5892387aed077daf6f90e1f0ba5b27
      - name: Scan with SonarQube
        working-directory: ./time-machine
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonar --info
      - name: Check SonarQube Quality Gate
        # Third-party action, pin to commit SHA!
        # See https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions
        uses: sonarsource/sonarqube-quality-gate-action@d304d050d930b02a896b0f85935344f023928496
        with:
          scanMetadataReportFile: time-machine/build/sonar/report-task.txt
        timeout-minutes: 3 # Force to fail step after specific time
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Send status to Slack
        # Third-party action, pin to commit SHA!
        # See https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions
        uses: digitalservicebund/notify-on-failure-gha@15dd05b628141b7bac0ad26e08c1935cb3ba6bc8 # v1.4.0
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
        with:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  ########################
  # VSCode extension jobs
  ########################

  check-style-vscode-extension:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ./vscode-extension/.node-version
          cache: npm
          cache-dependency-path: ./vscode-extension/package-lock.json
      - name: Cache node_modules
        uses: actions/cache@v3
        id: node-modules-cache
        with:
          path: ./vscode-extension/node_modules
          key: modules-${{ hashFiles('./vscode-extension/package-lock.json') }}
      - name: Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: npm ci
        working-directory: ./vscode-extension
      - name: Check style
        run: npm run style:check
        working-directory: ./vscode-extension
      - name: Send status to Slack
        uses: digitalservicebund/notify-on-failure-gha@15dd05b628141b7bac0ad26e08c1935cb3ba6bc8 # v1.4.0
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
        with:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  audit-licenses-vscode-extension:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ./vscode-extension/.node-version
          cache: npm
          cache-dependency-path: ./vscode-extension/package-lock.json
      - name: Install dependencies
        run: npm ci
        working-directory: ./vscode-extension
      - name: Run license scanner
        run: npm run audit:licences
        working-directory: ./vscode-extension
      - name: Upload licence report
        uses: actions/upload-artifact@v4
        with:
          name: vscode-extension-licence-report.csv
          retention-days: 3
          path: vscode-extension/licence-report.csv
      - name: Send status to Slack
        uses: digitalservicebund/notify-on-failure-gha@15dd05b628141b7bac0ad26e08c1935cb3ba6bc8 # v1.4.0
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
        with:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  build-and-test-vscode-extension:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ./vscode-extension/.node-version
          cache: npm
          cache-dependency-path: ./vscode-extension/package-lock.json
      - name: Cache node_modules
        uses: actions/cache@v3
        id: node-modules-cache
        with:
          path: ./vscode-extension/node_modules
          key: modules-${{ hashFiles('./vscode-extension/package-lock.json') }}
      - name: Establish virtual display buffer
        run: |
          /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          echo "Xvfb started"
      - name: Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: npm ci
        working-directory: ./vscode-extension
      - name: Run tests
        run: npm test
        working-directory: ./vscode-extension
        env:
          DISPLAY: ":99.0"
      - name: Send status to Slack
        uses: digitalservicebund/notify-on-failure-gha@15dd05b628141b7bac0ad26e08c1935cb3ba6bc8 # v1.4.0
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
        with:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  build-and-pack-vscode-extension:
    runs-on: ubuntu-latest
    needs: [check-style-vscode-extension, build-and-test-vscode-extension]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ./vscode-extension/.node-version
          cache: npm
          cache-dependency-path: ./vscode-extension/package-lock.json
      - name: Cache node_modules
        uses: actions/cache@v3
        id: node-modules-cache
        with:
          path: ./vscode-extension/node_modules
          key: modules-${{ hashFiles('./vscode-extension/package-lock.json') }}
      - name: Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: npm ci
        working-directory: ./vscode-extension
      - name: Build + Pack Extension
        run: npm run vscode:pack
        working-directory: ./vscode-extension
      - name: Extract Extension Version (= release version)
        id: package_version
        run: echo "VERSION=$(node -p "require('./vscode-extension/package.json').version")" >> $GITHUB_ENV
      - name: Append GitHub Run Number to VSIX file
        run: mv ./vscode-extension/ris-norms-${{ env.VERSION }}.vsix ./vscode-extension/ris-norms-${{ env.VERSION }}-${{ github.run_number }}.vsix
      - name: Upload extension # the release will pick this up, later
        uses: actions/upload-artifact@v4
        with:
          name: vscode-extension-vsix
          retention-days: 1
          path: vscode-extension/*.vsix
      - name: Send status to Slack
        # Third-party action, pin to commit SHA!
        # See https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions
        uses: digitalservicebund/notify-on-failure-gha@15dd05b628141b7bac0ad26e08c1935cb3ba6bc8 # v1.4.0
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
        with:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  analyze-vscode-extension:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: Install SonarScanner
        uses: digitalservicebund/github-actions/setup-sonarscanner@7c3c5fd3b1467215f9e6c66181a37538607999b1
      - name: Establish virtual display buffer
        run: |
          /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          echo "Xvfb started"
      - name: Scan with SonarQube
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          DISPLAY: ":99.0"
        run: |
          npm install
          npm run coverage
          sonar-scanner
        working-directory: ./vscode-extension
      - name: Check SonarQube Quality Gate
        uses: sonarsource/sonarqube-quality-gate-action@d304d050d930b02a896b0f85935344f023928496
        with:
          scanMetadataReportFile: vscode-extension/.scannerwork/report-task.txt
        timeout-minutes: 3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Send status to Slack
        uses: digitalservicebund/notify-on-failure-gha@15dd05b628141b7bac0ad26e08c1935cb3ba6bc8 # v1.4.0
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
        with:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  ###############################
  # build release from artifacts
  ###############################

  release-time-machine-and-vscode-extension:
    runs-on: ubuntu-latest
    needs: 
      - build-time-machine
      - unit-tests-time-machine
      - build-and-pack-vscode-extension
      - analyze-time-machine
      - audit-licenses-time-machine
      - audit-licenses-vscode-extension
      - analyze-vscode-extension
      - trivy-scan
      - talisman-check
    steps:
      # --> reading the release version
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ./vscode-extension/.node-version
          cache: npm
          cache-dependency-path: ./vscode-extension/package-lock.json
      - name: Extract Extension Version (= release version)
        id: package_version
        run: echo "VERSION=$(node -p "require('./vscode-extension/package.json').version")" >> $GITHUB_ENV
      # <---
      - uses: actions/download-artifact@v4
        with:
          name: vscode-extension-vsix
          path: downloaded-artifacts
      - uses: actions/download-artifact@v4
        with:
          name: time-machine-install
          path: downloaded-artifacts
      - name: List content of downloaded-artifacts
        run: ls -la downloaded-artifacts
      - name: Zip Release locally
        uses: thedoctor0/zip-release@0.7.5
        with:
          type: "zip"
          filename: "ris-norms-release.zip"
          directory: downloaded-artifacts
      - name: List content of downloaded-artifacts
        run: ls -la downloaded-artifacts
      - name: Create and Upload Pre-Release for VSCode Extension and time-machine
        uses: softprops/action-gh-release@v1
        with:
          files: downloaded-artifacts/ris-norms-release.zip
          tag_name: v${{ env.VERSION }}-${{ github.run_number }}
          name: v${{ env.VERSION }}-${{ github.run_number }} RIS-Norms VSCode Extension + Time Machine
          draft: false
          prerelease: true
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Send status to Slack
        # Third-party action, pin to commit SHA!
        # See https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions
        uses: digitalservicebund/notify-on-failure-gha@15dd05b628141b7bac0ad26e08c1935cb3ba6bc8 # v1.4.0
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
        with:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  ########################
  # system test jobs
  ########################

  check-style-system-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ./system-tests/.node-version
          cache: npm
          cache-dependency-path: ./system-tests/package-lock.json
      - name: Cache node_modules
        uses: actions/cache@v3
        id: node-modules-cache
        with:
          path: ./system-tests/node_modules
          key: modules-${{ hashFiles('./system-tests/package-lock.json') }}
      - name: Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: npm ci
        working-directory: ./system-tests
      - name: Check style
        run: npm run style:check
        working-directory: ./system-tests
      - name: Send status to Slack
        uses: digitalservicebund/notify-on-failure-gha@15dd05b628141b7bac0ad26e08c1935cb3ba6bc8 # v1.4.0
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
        with:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  audit-licenses-system-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ./system-tests/.node-version
          cache: npm
          cache-dependency-path: ./system-tests/package-lock.json
      - name: Install dependencies
        run: npm ci
        working-directory: ./system-tests
      - name: Run license scanner
        run: npm run audit:licences
        working-directory: ./system-tests
      - name: Upload licence report
        uses: actions/upload-artifact@v4
        with:
          name: system-tests-licence-report.csv
          retention-days: 3
          path: system-tests/licence-report.csv
      - name: Send status to Slack
        uses: digitalservicebund/notify-on-failure-gha@15dd05b628141b7bac0ad26e08c1935cb3ba6bc8 # v1.4.0
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
        with:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  ################
  # Security jobs
  ################

  trivy-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@91713af97dc80187565512baba96e4364e983601
        with:
          scan-type: "fs"
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH" #ignored by sarif report
      - name: Check trivy results
        run: |
          if grep -qE 'HIGH|CRITICAL' trivy-results.sarif; then
            echo "Vulnerabilities found"
            exit 1
          else
            echo "No significant vulnerabilities found"
            exit 0
          fi
      - name: Upload Trivy scan results to GitHub Security tab
        if: ${{ always() && github.ref == 'refs/heads/main' }} # Bypass non-zero exit code..
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"
      - name: Send status to Slack
        # Third-party action, pin to commit SHA!
        # See https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions
        uses: digitalservicebund/notify-on-failure-gha@15dd05b628141b7bac0ad26e08c1935cb3ba6bc8 # v1.4.0
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
        with:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  talisman-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Detect secrets in incoming commits with Talisman
        uses: digitalservicebund/talisman-secrets-scan-action@9a4cb85589e29a62b4546eb566119753a5680aeb
      - name: Send status to Slack
        # only on failure and if on "main" branch
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
        uses: digitalservicebund/notify-on-failure-gha@15dd05b628141b7bac0ad26e08c1935cb3ba6bc8 # v1.4.0
        with:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
