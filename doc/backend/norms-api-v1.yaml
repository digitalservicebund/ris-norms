openapi: 3.0.0
info:
  title: RIS-Norms API
  version: 1.0.0
  description: API for managing norms and announcements

paths:
  /announcements:
    get:
      summary: Get a list of all announcements
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Norm'

  /announcements/{eli}/release:
    get:
      summary: Get the latest release of a specific announcement by the amending law eli
      parameters:
        - name: eli
          in: path
          required: true
          description: ELI of the amending law
          schema:
            type: string
      responses:
        '200':
          description: Information about a released an announcement
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReleaseResponse'
    put:
      summary: Release the XML of a specific announcement by the amending law eli
      parameters:
        - name: eli
          in: path
          required: true
          description: ELI of the amending law
          schema:
            type: string
      responses:
        '200':
          description: Successfully released an announcement
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReleaseResponse'

  /norms/{eli}:
    get:
      summary: Get a specific norm by eli
      parameters:
        - name: eli
          in: path
          required: true
          description: eli of the norm
          schema:
            type: string
        - name: showMetadata
          in: query
          schema:
            type: boolean
            default: false
          description: "Should the metadata table be included? (only for Content-Type: text/html)"
        - name: atIsoDate
          in: query
          schema:
            type: string
            format: date-time
          description: "Passive modifications coming into affect before this date should be applied before rendering the HTML (only for Content-Type: text/html)"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Norm'
            application/xml:
              schema:
                $ref: '#/components/schemas/LegalDocML.de'
            text/html:
              schema:
                type: string
    put:
      summary: Update a specific norm by eli
      parameters:
        - name: eli
          in: path
          required: true
          description: eli of the norm
          schema:
            type: string
      requestBody:
        description: The XML of the norm (which may be updated and saved on DB)
        required: true
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/LegalDocML.de'
      responses:
        '200':
          description: Successful response
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/LegalDocML.de'

  /norms/{eli}/elements:
    get:
      summary: Get a norm's elements, filtered by the elements' types
      parameters:
        - name: eli
          in: path
          required: true
          description: ELI of the norm
          example: "eli/bund/bgbl-1/2017/s419/2017-03-15/1/deu/regelungstext-1"
          schema:
            type: string
        - name: type
          in: query
          required: true
          description: Type(s) of elements to include in the result.
          schema:
            type: array
            items:
              type: string
              enum: [preface, preamble, article, conclusions]
        - name: amendedBy
          in: query
          required: false
          description: ELI of an amending law. The result is restricted to elements that are affected by that law. <br>Note that the validity of that ELI is not checked by this endpoint.
          schema:
            type: string
          example: "eli/bund/bgbl-1/2017/s815/1995-03-15/1/deu/regelungstext-1"
      responses:
        '200':
          description: Successful response returning list of elements. If none matched, the list is empty.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ElementResponse'
        '404':
          description: Norm could not be found by its ELI.

  /norms/{eli}/elements/{eid}:
    get:
      summary: Get a single element inside a norm
      parameters:
        - name: eli
          in: path
          required: true
          description: ELI of the norm
          example: "eli/bund/bgbl-1/2017/s419/2017-03-15/1/deu/regelungstext-1"
          schema:
            type: string
        - name: eid
          in: path
          required: true
          description: eId of the element inside the norm
          example: "hauptteil-1_art-3"
          schema:
            type: string
        - name: atIsoDate
          in: query
          required: false
          description: "Passive modifications coming into affect before this date should be applied before rendering the HTML (only for Content-Type: text/html)"
          example: "2017-03-01T00:00:00.000Z"
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: "The element inside the norm"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElementResponse'
            text/html:
              schema:
                type: string
        '400':
          description: "Some parameter is invalid, e.g. `atIsoDate` could not be parsed into a date."
        '404':
          description: "The norm or the element could not be found."

  /norms/{eli}/articles:
    get:
      summary: Get a list of articles for a specific norm by eli
      parameters:
        - name: eli
          in: path
          required: true
          description: ELI of the norm
          schema:
            type: string
        - name: refersTo
          in: query
          required: false
          description: "Filter by the article's `refersTo` literal (`refersToLiterals.einzelvorschrift` in the specification). Only for `Content-Type: text/html`"
          schema:
            type: string
        - name: amendedBy
          in: query
          required: false
          description: "Filter the articles to articles amended by the given norm. Must be the eli of the amending norm. Requires amendedAt. Only for `Content-Type: application/json`"
          schema:
            type: string
        - name: amendedAt
          in: query
          required: false
          description: "Filter the articles to articles amended at the given livecycle event. Must be the eid of the livecycle event. Requires amendedBy. Only for `Content-Type: application/json`"
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'
            text/html:
              schema:
                type: string

  /norms/{eli}/articles/{eid}:
    get:
      summary: Get a specific article by eid for a given norm
      parameters:
        - name: eli
          in: path
          required: true
          description: ELI of the norm
          schema:
            type: string
        - name: eid
          in: path
          required: true
          description: EID of the article
          schema:
            type: string
        - name: atIsoDate
          in: query
          schema:
            type: string
            format: date-time
          description: "Passive modifications coming into affect before this date should be applied before rendering the HTML (only for Content-Type: text/html)"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
            text/html:
              schema:
                type: string

  /norms/{eli}/mods:
    patch:
      summary: Save an amending command and update ZF0
      parameters:
        - name: eli
          in: path
          required: true
          description: ELI of the norm
          schema:
            type: string
        - name: dryRun
          in: query
          schema:
            type: boolean
            default: false
          description: "Should the update not be saved?"
      requestBody:
        description: The updated amending commands
        required: true
        content:
          application/json:
            schema:
              type: object
              description: object mapping between eids and the change mods
              additionalProperties:
                $ref: '#/components/schemas/Mod'
      responses:
        '200':
          description: Successful update
          content:
            application/json:
              schema:
                type: object
                properties:
                  amendingNormXml:
                    type: string
                    format: LegalDocML.de XML
                  targetNormXml:
                    type: array
                    items:
                      type: string
                      format: LegalDocML.de XML
        '400':
          description: Bad Request
        '422':
          description: Unprocessable Content
        '404':
          description: Norm not found

  /norms/{eli}/mods/{eid}:
    put:
      summary: Save an amending command and update ZF0
      parameters:
        - name: eli
          in: path
          required: true
          description: ELI of the norm
          schema:
            type: string
        - name: eid
          in: path
          required: true
          description: the eId of the akn:mod
          schema:
            type: string
        - name: dryRun
          in: query
          schema:
            type: boolean
            default: false
          description: "Should the update not be saved?"
      requestBody:
        description: The updated amending command
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/Mod'
      responses:
        '200':
          description: Successful update
          content:
            application/json:
              schema:
                type: object
                properties:
                  amendingNormXml:
                    type: string
                  targetNormXml:
                    type: string
        '400':
          description: Bad Request
        '422':
          description: Unprocessable Content
        '404':
          description: Norm not found

  /norms/{eli}/timeBoundaries:
    get:
      summary: Get all time boundaries for a given norm
      parameters:
        - name: eli
          in: path
          required: true
          description: ELI of the norm
          schema:
            type: string
      responses:
        '200':
          description: Successful response

          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimeBoundary'
    put:
      summary: Update all time boundaries for a given norm
      parameters:
        - name: eli
          in: path
          required: true
          description: ELI of the norm
          schema:
            type: string
      requestBody:
        description: List of new time boundaries of a norm
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/TimeBoundary'
      responses:
        '200':
          description: Successful update
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimeBoundary'
        '400':
          description: Bad Request
        '404':
          description: Norm not found

  /norms/{eli}/proprietary/{atDate}:
    get:
      summary: Get the proprietary metadata of a norm at the specified date
      parameters:
        - name: eli
          in: path
          required: true
          description: ELI of the norm
          schema:
            type: string
        - name: atDate
          in: path
          required: false
          description: date at which the metadata should be loaded
          schema:
            type: string
            format: date
      responses:
        '200':
          description: List of proprietary metadata at that date
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Metadata'
        '404':
          description: If the norm does not exist.
    put:
      summary: Replace the proprietary metadata of a norm at the specified date
      parameters:
        - name: eli
          in: path
          required: false
          description: ELI of the norm
          schema:
            type: string
        - name: atDate
          in: path
          required: true
          description: eId of the time boundary at which the metadata should be updated
          schema:
            type: string
            format: date
      requestBody:
        description: The proprietary request schema containing several metadata.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata'
      responses:
        '200':
          description: Metadata was updated successfully. Returns the updated metadata.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Metadata'
        '404':
          description: If the norm or the time boundary doesn't exist.

  /norms/{eli}/proprietary/{eid}/{atDate}:
    get:
      summary: Get the proprietary metadata of a single element at the specified date
      tags:
        - under construction
      parameters:
        - name: eli
          in: path
          required: true
          description: ELI of the norm
          schema:
            type: string
        - name: eid
          in: path
          required: true
          description: the eId of the selected single element
          schema:
            type: string
        - name: atDate
          in: path
          required: false
          description: date at which the metadata should be loaded
          schema:
            type: string
            format: date
      responses:
        '200':
          description: List of proprietary metadata at that date for the single element
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/SingleElementMetadata'
        '404':
          description: If the norm or the single element or the time boundary does not exist.
    put:
      summary: Replace the proprietary metadata of a single element at the specified date
      tags:
        - under construction
      parameters:
        - name: eli
          in: path
          required: false
          description: ELI of the norm
          schema:
            type: string
        - name: eid
          in: path
          required: true
          description: the eId of the selected single element
          schema:
            type: string
        - name: atDate
          in: path
          required: true
          description: eId of the time boundary at which the metadata should be updated
          schema:
            type: string
            format: date
      requestBody:
        description: The proprietary request schema containing several metadata.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SingleElementMetadata'
      responses:
        '200':
          description: Metadata for a single element was updated successfully. Returns the updated metadata.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/SingleElementMetadata'
        '404':
          description: If the norm or the single element or the time boundary doesn't exist.

  /norms/{eli}/{eid}:
    get:
      summary: Get an element of a norm by its EID (currently only in HTML preview format)
      parameters:
        - name: eli
          in: path
          required: true
          description: ELI of the norm
          schema:
            type: string
            example: eli/bund/bgbl-1/2017/s815/1995-03-15/1/deu/regelungstext-1
        - name: eid
          in: path
          required: true
          description: EID of the element in the norm
          schema:
            type: string
            example: hauptteil-1_art-3
      responses:
        '200':
          description: An HTML rendering of the element
          content:
            text/html:
              schema:
                type: string
        '404':
          description: Norm or element not found


  /renderings:
    post:
      summary: Create and return an HTML rendering of the provided LDML.de XML
      parameters:
        - in: query
          name: showMetadata
          schema:
            type: boolean
            default: false
          description: Should the metadata table be included?
        - name: atIsoDate
          in: query
          schema:
            type: string
            format: date-time
            default: "the current date"
          description: "Passive modifications coming into effect before this date should be applied before rendering the HTML (Only when providing application/json)"
      requestBody:
        required: true
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/LegalDocML.de'
          application/json:
            schema:
              $ref: '#/components/schemas/RenderRequest'
      responses:
        '200':
          description: HTML rendering the provided LDML.de XML
          content:
            text/html:
              schema:
                type: string

components:
  schemas:
    Norm:
      type: object
      properties:
        eli:
          type: string
        title:
          type: string
        shortTitle:
          type: string
        fna:
          type: string
        frbrName:
          type: string
        frbrNumber:
          type: string
        frbrDateVerkuendung:
          type: string
          format: date

    Article:
      type: object
      properties:
        eli:
          type: string
        enumeration:
          type: string
        title:
          type: string
        affectedDocumentEli:
          type: string
        affectedDocumentZf0Eli:
          type: string

    TimeBoundary:
      type: object
      properties:
        eventRefEid:
          type: string
        date:
          type: string
          format: date
        temporalGroupEid:
          type: string

    Mod:
      type: object
      properties:
        refersTo:
          type: string
        timeBoundaryEid:
          type: string
        destinationHref:
          type: string
        newText:
          type: string

    ReleaseResponse:
      type: object
      properties:
        releaseAt:
          type: string
          format: date-time
        amendingLawEli:
          type: string
        zf0Elis:
          type: array
          items:
            type: string

    RenderRequest:
      type: object
      properties:
        norm:
          description: The xml of the norm which should be rendered.
          type: string
          format: LegalDocML.de XML
        customNorms:
          type: object
          additionalProperties:
            description: The xmls of norms which are referenced by the norm (e.g. in passiveModifications) and should not be loaded from the database.
            type: string
            format: LegalDocML.de XML

    LegalDocML.de:
      type: object
      xml:
        name: akomaNtoso
        namespace: 'http://Inhaltsdaten.LegalDocML.de/1.6'
        prefix: akn

    ElementResponse:
      type: object
      properties:
        eli:
          type: string
        title:
          type: string
        type:
          type: string
          enum: [ preface, preamble, article, conclusions ]

    Metadata:
      type: object
      properties:
        fna:
          type: string
          description: FNA (Fundstellennachweis A) of the norm
        art:
          type: string
          description: Art ("Art der Norm") of the norm
        typ:
          type: string
          description: Type ("Typ") of the document
        subtyp:
          type: string
          description: Subtype ("Subtyp") of the document
        bezeichnungInVorlage:
          type: string
          description: Designation according to specification ("Bezeichnung gemäß Vorlage") of the document
        artDerNorm:
          type: string
          description: SN,ÄN,ÜN ("Art der Norm") of the norm
        normgeber:
          type: string
          description: DEU,DDR,BW... ("Normgeber") of the norm
        beschliessendesOrgan:
          type: string
          description: ("Beschließendes Organ") of the norm
        qualifizierteMehrheit:
          type: boolean
          description: Boolean value if beschliessendesOrgan had a ("Qualifizierte Mehrheit") when deciding
        organisationsEinheit:
          type: string
          description: ("Organisationseinheit")

    SingleElementMetadata:
      type: object
      properties:
        artDerNorm:
          type: string
          description: SN or ÄN or ÜN ("Art der Norm") of the single element
